using UnityEngine;
using System.Collections;

public class InitializeOpponentSystem : EgoSystem<OpponentsComponent, Transform>
{
	public override void Start()
	{
        ForEachGameObject(
            (EgoComponent ego, OpponentsComponent opponents , Transform transform) =>
                {
                    // Remove all previous cars
                    for (int i = 0; i < transform.childCount; i++)
                    {
                        Ego.Destroy(transform.GetChild(i).gameObject);
                    }

                    // Create cars
                    //for (int row = 0; row < OpponentsComponent.maxCars; row++)
                    //{

                    //    //for (int col = 0; col < OpponentsComponent.columns; col++)
                    //    //{
                    //    //    // GameObject & EgoComponent
                    //    //    var carIndex = Random.Range(0, OpponentsComponent.tiles.Count);
                    //    //    if (!OpponentsComponent.tiles[carIndex]) return;
                    //    //    var carEgo = Ego.AddGameObject(GameObject.Instantiate(OpponentsComponent.tiles[carIndex]));
                    //    //    carEgo.gameObject.name = "car";
                    //    //    carEgo.gameObject.transform.parent = transform;

                    //    //    // Position
                    //    //    SpriteRenderer carSprite;
                    //    //    if (!carEgo.TryGetComponents(out carSprite)) return;

                    //    //    var x = carSprite.bounds.size.x * (col + -brickInstantiation.columns / 2.0f + 0.5f);
                    //    //    var y = carSprite.bounds.size.y * (row + -brickInstantiation.maxCars / 2.0f + 0.5f);
                    //    //    carEgo.transform.localPosition = new Vector2(x, y);

                    //    //    var e = new BrickCreatedEvent(brickInstantiation.maxCars * brickInstantiation.columns);
                    //    //    EgoEvents<BrickCreatedEvent>.AddEvent(e);
                    //    //}
                    //}
                }

            );
    }

	public override void Update()
	{
		
	}

	public override void FixedUpdate()
	{
		
	}
}